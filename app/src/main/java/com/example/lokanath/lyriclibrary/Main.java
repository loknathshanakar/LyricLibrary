package com.example.lokanath.lyriclibrary;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.os.Handler;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.KeyCharacterMap;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewConfiguration;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.RelativeLayout;import android.widget.Toast;public class Main extends AppCompatActivity {    double layoutHeight = 0;    double layoutWidth = 0;    double bXY = 0;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        if (getIntent().getBooleanExtra("EXIT", false)) {            finish();        }        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        Context context = this;        //Get Screen Size        layoutWidth = this.getResources().getDisplayMetrics().widthPixels;        layoutHeight = this.getResources().getDisplayMetrics().heightPixels;        layoutHeight = layoutHeight - getStatusBarHeight();        //Screen size is computed        Bitmap bg = BitmapFactory.decodeResource(getResources(), R.drawable.main_bg);        bg = getResizedBitmap(bg, (int) layoutHeight + 200, (int) layoutWidth + 200);        BitmapDrawable drawBG = new BitmapDrawable(context.getResources(), bg);        RelativeLayout layout = (RelativeLayout) findViewById(R.id.LAYID);        final int sdk = android.os.Build.VERSION.SDK_INT;        if (sdk < android.os.Build.VERSION_CODES.JELLY_BEAN) {            layout.setBackgroundDrawable(drawBG);        } else {            layout.setBackground(drawBG);        }        if (layoutWidth > layoutHeight) {            //bXY = (layoutWidth - (layoutWidth * (layoutHeight / layoutWidth))) / 2.5;            bXY = layoutHeight / 3;            //Toast.makeText(getApplicationContext(), (bXY) + " ", Toast.LENGTH_LONG).show();        } else {            //bXY = (layoutHeight - (layoutHeight * (layoutWidth / layoutHeight))) / 2.5;            bXY = layoutWidth / 3;            //Toast.makeText(getApplicationContext(), (bXY) + " ", Toast.LENGTH_LONG).show();        }        final ImageButton searchButtonD, libraryButtonD, closeButtonD, prefButtonD;        final Bitmap searchButton = BitmapFactory.decodeResource(getResources(), R.drawable.search);        final Bitmap libButton = BitmapFactory.decodeResource(getResources(), R.drawable.library);        final Bitmap closeButton = BitmapFactory.decodeResource(getResources(), R.drawable.close);        final Bitmap prefButton = BitmapFactory.decodeResource(getResources(), R.drawable.preference);        searchButtonD = (ImageButton) findViewById(R.id.searchButton);        libraryButtonD = (ImageButton) findViewById(R.id.libButton);        closeButtonD = (ImageButton) findViewById(R.id.closeButton);        prefButtonD = (ImageButton) findViewById(R.id.prefButton);        final double percentPadding = bXY * .2;        searchButtonD.setImageBitmap(getResizedBitmap(searchButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));        libraryButtonD.setImageBitmap(getResizedBitmap(libButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));        closeButtonD.setImageBitmap(getResizedBitmap(closeButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));        prefButtonD.setImageBitmap(getResizedBitmap(prefButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));        searchButtonD.setBackgroundColor(Color.TRANSPARENT);        searchButton.recycle();        libButton.recycle();        closeButton.recycle();        prefButton.recycle();        ViewGroup.LayoutParams params = searchButtonD.getLayoutParams();        params.width = (int) bXY;        params.height = (int) bXY;        searchButtonD.setLayoutParams(params);        params = libraryButtonD.getLayoutParams();        params.width = (int) bXY;        params.height = (int) bXY;        libraryButtonD.setLayoutParams(params);        params = closeButtonD.getLayoutParams();        params.width = (int) bXY;        params.height = (int) bXY;        closeButtonD.setLayoutParams(params);        params = prefButtonD.getLayoutParams();        params.width = (int) bXY;        params.height = (int) bXY;        prefButtonD.setLayoutParams(params);        boolean hasMenuKey = ViewConfiguration.get(getApplicationContext()).hasPermanentMenuKey();        boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);        //Lets change button Positions        double midPointX = 0, midPointY = 0;        if (layoutWidth > layoutHeight) {            if (!hasMenuKey && !hasBackKey) {                midPointY = layoutWidth / 2;                midPointX = layoutHeight / 2;                //Toast.makeText(getApplicationContext(), "Cond 00", Toast.LENGTH_LONG).show();            } else {                midPointY = layoutWidth / 2;                midPointX = layoutHeight / 2;                //Toast.makeText(getApplicationContext(), "Cond 01", Toast.LENGTH_LONG).show();            }        } else {            if (!hasMenuKey && !hasBackKey) {                midPointY = layoutWidth / 2;                midPointX = layoutHeight / 2;                //Toast.makeText(getApplicationContext(), "Cond 10", Toast.LENGTH_LONG).show();            } else {                midPointY = layoutWidth / 2;                midPointX = layoutHeight / 2;                //Toast.makeText(getApplicationContext(), "Cond 11", Toast.LENGTH_LONG).show();            }        }        //Button Search Only        int paddings = (int) percentPadding / 2;        //Some gap bw the axis        //paddings=0;        searchButtonD.setX((float) (midPointY - bXY - paddings));        searchButtonD.setY((float) (midPointX - bXY - paddings));        //Button Library Only        libraryButtonD.setX((float) (midPointY + paddings));        libraryButtonD.setY((float) (midPointX - bXY - paddings));        //Button close Only        closeButtonD.setX((float) (midPointY + paddings));        closeButtonD.setY((float) (midPointX + paddings));        //Button pref Only        prefButtonD.setX((float) (midPointY - bXY - paddings));        prefButtonD.setY((float) (midPointX + paddings));        final Handler handler = new Handler();        searchButtonD.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //Toast.makeText(getApplicationContext(), "Search Pressed", Toast.LENGTH_SHORT).show();                ImageButton tempButton;                try {                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            //searchButtonD.setImageBitmap(getResizedBitmap(searchButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                        }                    }, 50);                    //Bitmap tsButton = BitmapFactory.decodeResource(getResources(), R.drawable.searchc);                    //searchButtonD.setImageBitmap(getResizedBitmap(tsButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                } catch (Exception e) {                    Toast.makeText(getApplicationContext(), "Got You", Toast.LENGTH_SHORT).show();                }                v.performHapticFeedback(1);                //Start Search Activity                Intent intent = new Intent(Main.this, SearchEngin.class);                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                startActivity(intent);                finish();            }        });        libraryButtonD.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //Toast.makeText(getApplicationContext(), "Library Pressed", Toast.LENGTH_SHORT).show();                try {                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            //libraryButtonD.setImageBitmap(getResizedBitmap(libButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                        }                    }, 50);                    //Bitmap tsButton = BitmapFactory.decodeResource(getResources(), R.drawable.libraryc);                    //libraryButtonD.setImageBitmap(getResizedBitmap(tsButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                } catch (Exception e) {                    Toast.makeText(getApplicationContext(), "Got You", Toast.LENGTH_SHORT).show();                }                v.performHapticFeedback(1);                Intent intent = new Intent(Main.this, LyricExplorer.class);                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                startActivity(intent);                finish();            }        });        prefButtonD.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //Toast.makeText(getApplicationContext(), "Preference Pressed", Toast.LENGTH_SHORT).show();                try {                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            //prefButtonD.setImageBitmap(getResizedBitmap(prefButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                        }                    }, 50);                    //Bitmap tsButton = BitmapFactory.decodeResource(getResources(), R.drawable.preferencec);                    //prefButtonD.setImageBitmap(getResizedBitmap(tsButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                } catch (Exception e) {                    Toast.makeText(getApplicationContext(), "Got You", Toast.LENGTH_SHORT).show();                }                v.performHapticFeedback(1);                Intent intent = new Intent(Main.this, Preference.class);                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);                startActivity(intent);                finish();            }        });        closeButtonD.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //Toast.makeText(getApplicationContext(), "Close Pressed", Toast.LENGTH_SHORT).show();                try {                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            // closeButtonD.setImageBitmap(getResizedBitmap(closeButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                        }                    }, 50);                    //Bitmap tsButton = BitmapFactory.decodeResource(getResources(), R.drawable.closec);                    //closeButtonD.setImageBitmap(getResizedBitmap(tsButton, (int) (bXY + percentPadding), (int) (bXY + percentPadding)));                } catch (Exception e) {                    Toast.makeText(getApplicationContext(), "Got You", Toast.LENGTH_SHORT).show();                }                v.performHapticFeedback(1);                AlertDialog.Builder dlgAlert = new AlertDialog.Builder(Main.this);                dlgAlert.setMessage("Do You Wish To Exit??");                dlgAlert.setTitle("Lyric Library");                dlgAlert.setPositiveButton("Exit", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        android.os.Process.killProcess(android.os.Process.myPid());                    }                });                dlgAlert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        return;                    }                });                dlgAlert.setCancelable(true);                dlgAlert.create().show();            }        });        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)                        .setAction("Action", null).show();            }        });    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    public Bitmap getResizedBitmap(Bitmap bm, int newHeight, int newWidth) {        int width = bm.getWidth();        int height = bm.getHeight();        float scaleWidth = ((float) newWidth) / width;        float scaleHeight = ((float) newHeight) / height;        // Create a matrix for the manipulation        Matrix matrix = new Matrix();        // Resize the bit map        matrix.postScale(scaleWidth, scaleHeight);        // Recreate the new Bitmap        Bitmap resizedBitmap = Bitmap.createBitmap(bm, 0, 0, width, height, matrix, false);        //Bitmap resizedBitmap=Bitmap.createScaledBitmap(bm,width,height,true);        return resizedBitmap;    }    public int getStatusBarHeight() {        int result = 0;        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");        if (resourceId > 0) {            result = getResources().getDimensionPixelSize(resourceId);        }        return result;    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        if ((keyCode == KeyEvent.KEYCODE_BACK)) {            AlertDialog.Builder dlgAlert = new AlertDialog.Builder(Main.this);            dlgAlert.setMessage("Do You Wish To Exit??");            dlgAlert.setTitle("Lyric Library");            dlgAlert.setPositiveButton("Exit", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    android.os.Process.killProcess(android.os.Process.myPid());                }            });            dlgAlert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    return;                }            });            dlgAlert.setCancelable(true);            dlgAlert.create().show();        }        return (true);    }}